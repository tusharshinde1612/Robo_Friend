{"version":3,"sources":["logo.svg","Component/Card/card.js","Component/Card_list/card-list.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","src","id","alt","name","email","Cardlist","users","map","key","App","filteredcard","e","setState","searchField","target","value","state","fetch","then","response","json","data","console","log","this","filterrobot","filter","toLowerCase","includes","type","onChange","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,kC,yKCW5BC,G,wBATJ,SAACC,GACX,OACD,yBAAKC,UAAU,YACf,yBAAKC,IAAG,+BAA0BF,EAAMG,IAAMC,IAAI,SAClD,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCHGC,EAAS,SAAC,GAAW,IAAVC,EAAS,EAATA,MACvB,OACC,yBAAKP,UAAU,QACdO,EAAMC,KAAI,SAAAD,GAAK,OAAE,kBAAC,EAAD,CAAME,IAAKF,EAAML,GAAIE,KAAMG,EAAMH,KAAMC,MAAOE,EAAMF,MAAOH,GAAIK,EAAML,UCiC1EQ,E,YAhCb,aAAc,IAAD,8BACX,+CAUFC,aAAa,SAACC,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAVtC,EAAKC,MAAM,CACTV,MAAM,GACNO,YAAY,IAJD,E,iFAOO,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAC3EF,MAAK,SAAAG,GAAI,OAAE,EAAKT,SAAS,CAACN,MAAMe,GAAMC,QAAQC,IAAI,EAAKP,MAAMV,a,+BAOzD,IAAD,SACyBkB,KAAKR,MAA1BV,EADJ,EACIA,MAEAmB,GAHJ,EACUZ,YAEMP,EAAMoB,QAAO,SAAAb,GAAW,OAAEA,EAAYV,KAAKwB,cAC1DC,SAAS,EAAKZ,MAAMH,YAAYc,mBAGrC,OACF,yBAAK5B,UAAU,OACb,0CACD,2BAAO8B,KAAK,OAAOC,SAAUN,KAAKd,aAAcqB,YAAY,iBAC3D,kBAAC,EAAD,CAAUzB,MAAOmB,S,GA5BHO,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.b9c8d230.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './card.css'\r\nconst Card=(props)=>{\r\n\treturn(\r\n<div className=\"robocard\">\r\n<img src={`https://robohash.org/${props.id}`} alt=\"ROBO\"/>\r\n<h2>{props.name}</h2>\r\n<p>{props.email}</p>\r\n</div>\r\n\t\t)\r\n}\r\nexport default Card;","import React from 'react';\r\nimport './card-list.css';\r\nimport Card from '../Card/card.js'\r\n\r\nexport const Cardlist=({users})=>{\r\n\treturn(\r\n\t\t<div className=\"list\">\r\n\t\t{users.map(users=><Card key={users.id} name={users.name} email={users.email} id={users.id}/>)}\r\n\t</div>\r\n\t);\r\n}\r\n\r\n//export default Cardlist;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';                                        \nimport logo from './logo.svg';\nimport './App.css';\n// import Card from './Component/Card/card.js';\nimport {Cardlist} from './Component/Card_list/card-list.js';\n\n\nclass App extends React.Component{\n  constructor(){\n    super()\n  this.state={\n    users:[],\n    searchField:''\n      }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json())\n    .then(data=>this.setState({users:data},console.log(this.state.users))); \n  }\n  filteredcard=(e)=>{\n   this.setState({searchField: e.target.value})\n\n  }\n\nrender(){\n     const {users,searchField} = this.state;\n      \n      const filterrobot=users.filter(searchField=>searchField.name.toLowerCase()\n        .includes(this.state.searchField.toLowerCase()))  \n      \n\n    return (\n  <div className=\"App\">\n    <h1>Robofriend</h1>\n   <input type=\"text\" onChange={this.filteredcard} placeholder=\"Search Robot\"/>\n    <Cardlist users={filterrobot}/>\n      </div>\n  );\n}}\n\nexport default App;\n\n//// const filteredString = users.filter(users =>\n      //   users.name.toLowerCase().includes(searchField.toLowerCase()));\n\n\n/// const filterrobot=this.state.searchField.includes(this.state.users);\n\n/// <input type=\"text\" onChange={(e)=>this.setState({searchField:e.target.value})} placeholder=\"Search Robot\"/>\n//// <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n// // <Searchbox placeholder = 'search robot' filteredcard={this.filteredcard}/>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}